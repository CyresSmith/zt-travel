generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String                 @default("")
  email                 String                 @unique
  emailVerified         DateTime?              @map("email_verified")
  phone                 String                 @default("")
  image                 String                 @default("")
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnable     Boolean                @default(false)
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  articles              Article[]
  events                Event[]
  eventRewiews          EventReview[]
  places                Place[]
  placeRewiews          PlaceReview[]
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlaceCategory {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  type      PlaceType
  slug      String
  name      Json?
  palces    Place[]
}

model Place {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  logo        String?
  image       String?
  images      String[]      @default([])
  phone       String?
  email       String?
  url         String?
  facebook    String?
  instagram   String?
  gmapsUrl    String?       @map("gmaps_url")
  slug        String        @unique
  rating      Int           @default(0)
  views       Int           @default(0)
  categoryId  String        @map("category_id")
  userId      String        @map("user_id")
  communityId String        @map("community_id")
  latLang     String[]      @default([])
  name        Json
  desc        Json
  address     Json
  districtId  String        @map("district_id")
  articles    Article[]
  events      Event[]
  category    PlaceCategory @relation(fields: [categoryId], references: [id])
  community   Community     @relation(fields: [communityId], references: [id])
  district    District      @relation(fields: [districtId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: NoAction)
  rewiews     PlaceReview[]
}

model PlaceReview {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  rating    Int
  placetId  String   @map("place_id")
  userId    String   @map("user_id")
  text      Json
  place     Place    @relation(fields: [placetId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model EventCategory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  slug      String
  name      Json?
  events    Event[]
}

model EventReview {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  rating    Int
  eventId   String   @map("event_id")
  userId    String   @map("user_id")
  text      Json?
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model Event {
  id         String         @id @default(uuid())
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")
  image      String?
  images     String[]       @default([])
  phone      String
  url        String?
  slug       String         @unique
  rating     Int            @default(0)
  views      Int            @default(0)
  duration   Int
  periodic   Boolean
  categoryId String?        @map("category_id")
  placeId    String?        @map("place_id")
  userId     String         @map("user_id")
  name       Json
  desc       Json
  address    Json?
  start      DateTime
  category   EventCategory? @relation(fields: [categoryId], references: [id])
  palce      Place?         @relation(fields: [placeId], references: [id])
  user       User           @relation(fields: [userId], references: [id], onDelete: NoAction)
  rewiews    EventReview[]
  tags       TagsOnEvents[]
}

model Tag {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  type      TagType
  name      Json?
  events    TagsOnEvents[]
}

model TagsOnEvents {
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String
  createdAt DateTime @default(now()) @map("created_at")

  @@id([eventId, tagId])
}

model Article {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  image     String?
  images    String[] @default([])
  slug      String   @unique
  views     Int      @default(0)
  placeId   String?  @map("place_id")
  userId    String?  @map("user_id")
  name      Json?
  desc      Json?
  text      Json?
  place     Place?   @relation(fields: [placeId], references: [id])
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model District {
  id          String      @id @default(uuid())
  name_uk     String
  geometry    String
  createdAt   DateTime    @default(now()) @map("created_at")
  name_en     String?
  communities Community[]
  Place       Place[]
}

model Community {
  id         String   @id @default(uuid())
  name_uk    String
  districtId String   @map("district_id")
  geometry   String
  createdAt  DateTime @default(now()) @map("created_at")
  name_en    String?
  district   District @relation(fields: [districtId], references: [id])
  Place      Place[]
}

enum UserRole {
  USER
  ADMIN
}

enum PlaceType {
  INTERESTING_PLACE
  RESIDENCE
  EAT
}

enum TagType {
  PLACE
  EVENT
  ARTICLE
}

enum Locale {
  uk
  en
}
